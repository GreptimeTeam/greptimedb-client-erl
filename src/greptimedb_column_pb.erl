%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.7
%% Version source: file
-module(greptimedb_column_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_column.SemanticType'/1, 'enum_value_by_symbol_column.SemanticType'/1]).
-export(['enum_symbol_by_value_greptime.v1.ColumnDataType'/1, 'enum_value_by_symbol_greptime.v1.ColumnDataType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types
-type 'column.SemanticType'() :: 'TAG' | 'FIELD' | 'TIMESTAMP'.
-type 'greptime.v1.ColumnDataType'() :: 'BOOLEAN' | 'INT8' | 'INT16' | 'INT32' | 'INT64' | 'UINT8' | 'UINT16' | 'UINT32' | 'UINT64' | 'FLOAT32' | 'FLOAT64' | 'BINARY' | 'STRING' | 'DATE' | 'DATETIME' | 'TIMESTAMP_SECOND' | 'TIMESTAMP_MILLISECOND' | 'TIMESTAMP_MICROSECOND' | 'TIMESTAMP_NANOSECOND'.
-export_type(['column.SemanticType'/0, 'greptime.v1.ColumnDataType'/0]).

%% message types
-type values() ::
      #{i8_values               => [integer()],     % = 1, repeated, 32 bits
        i16_values              => [integer()],     % = 2, repeated, 32 bits
        i32_values              => [integer()],     % = 3, repeated, 32 bits
        i64_values              => [integer()],     % = 4, repeated, 64 bits
        u8_values               => [non_neg_integer()], % = 5, repeated, 32 bits
        u16_values              => [non_neg_integer()], % = 6, repeated, 32 bits
        u32_values              => [non_neg_integer()], % = 7, repeated, 32 bits
        u64_values              => [non_neg_integer()], % = 8, repeated, 64 bits
        f32_values              => [float() | integer() | infinity | '-infinity' | nan], % = 9, repeated
        f64_values              => [float() | integer() | infinity | '-infinity' | nan], % = 10, repeated
        bool_values             => [boolean() | 0 | 1], % = 11, repeated
        binary_values           => [iodata()],      % = 12, repeated
        string_values           => [unicode:chardata()], % = 13, repeated
        date_values             => [integer()],     % = 14, repeated, 32 bits
        datetime_values         => [integer()],     % = 15, repeated, 64 bits
        ts_second_values        => [integer()],     % = 16, repeated, 64 bits
        ts_millisecond_values   => [integer()],     % = 17, repeated, 64 bits
        ts_microsecond_values   => [integer()],     % = 18, repeated, 64 bits
        ts_nanosecond_values    => [integer()]      % = 19, repeated, 64 bits
       }.

-type column() ::
      #{column_name             => unicode:chardata(), % = 1, optional
        semantic_type           => 'TAG' | 'FIELD' | 'TIMESTAMP' | integer(), % = 2, optional, enum column.SemanticType
        values                  => values(),        % = 3, optional
        null_mask               => iodata(),        % = 4, optional
        datatype                => 'BOOLEAN' | 'INT8' | 'INT16' | 'INT32' | 'INT64' | 'UINT8' | 'UINT16' | 'UINT32' | 'UINT64' | 'FLOAT32' | 'FLOAT64' | 'BINARY' | 'STRING' | 'DATE' | 'DATETIME' | 'TIMESTAMP_SECOND' | 'TIMESTAMP_MILLISECOND' | 'TIMESTAMP_MICROSECOND' | 'TIMESTAMP_NANOSECOND' | integer() % = 5, optional, enum greptime.v1.ColumnDataType
       }.

-type column_def() ::
      #{name                    => unicode:chardata(), % = 1, optional
        datatype                => 'BOOLEAN' | 'INT8' | 'INT16' | 'INT32' | 'INT64' | 'UINT8' | 'UINT16' | 'UINT32' | 'UINT64' | 'FLOAT32' | 'FLOAT64' | 'BINARY' | 'STRING' | 'DATE' | 'DATETIME' | 'TIMESTAMP_SECOND' | 'TIMESTAMP_MILLISECOND' | 'TIMESTAMP_MICROSECOND' | 'TIMESTAMP_NANOSECOND' | integer(), % = 2, optional, enum greptime.v1.ColumnDataType
        is_nullable             => boolean() | 0 | 1, % = 3, optional
        default_constraint      => iodata()         % = 4, optional
       }.

-export_type(['values'/0, 'column'/0, 'column_def'/0]).
-type '$msg_name'() :: values | column | column_def.
-type '$msg'() :: values() | column() | column_def().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        values -> encode_msg_values(id(Msg, TrUserData), TrUserData);
        column -> encode_msg_column(id(Msg, TrUserData), TrUserData);
        column_def -> encode_msg_column_def(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_values(Msg, TrUserData) -> encode_msg_values(Msg, <<>>, TrUserData).


encode_msg_values(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{i8_values := F1} ->
                 TrF1 = id(F1, TrUserData),
                 if TrF1 == [] -> Bin;
                    true -> e_field_values_i8_values(TrF1, Bin, TrUserData)
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{i16_values := F2} ->
                 TrF2 = id(F2, TrUserData),
                 if TrF2 == [] -> B1;
                    true -> e_field_values_i16_values(TrF2, B1, TrUserData)
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{i32_values := F3} ->
                 TrF3 = id(F3, TrUserData),
                 if TrF3 == [] -> B2;
                    true -> e_field_values_i32_values(TrF3, B2, TrUserData)
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{i64_values := F4} ->
                 TrF4 = id(F4, TrUserData),
                 if TrF4 == [] -> B3;
                    true -> e_field_values_i64_values(TrF4, B3, TrUserData)
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{u8_values := F5} ->
                 TrF5 = id(F5, TrUserData),
                 if TrF5 == [] -> B4;
                    true -> e_field_values_u8_values(TrF5, B4, TrUserData)
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{u16_values := F6} ->
                 TrF6 = id(F6, TrUserData),
                 if TrF6 == [] -> B5;
                    true -> e_field_values_u16_values(TrF6, B5, TrUserData)
                 end;
             _ -> B5
         end,
    B7 = case M of
             #{u32_values := F7} ->
                 TrF7 = id(F7, TrUserData),
                 if TrF7 == [] -> B6;
                    true -> e_field_values_u32_values(TrF7, B6, TrUserData)
                 end;
             _ -> B6
         end,
    B8 = case M of
             #{u64_values := F8} ->
                 TrF8 = id(F8, TrUserData),
                 if TrF8 == [] -> B7;
                    true -> e_field_values_u64_values(TrF8, B7, TrUserData)
                 end;
             _ -> B7
         end,
    B9 = case M of
             #{f32_values := F9} ->
                 TrF9 = id(F9, TrUserData),
                 if TrF9 == [] -> B8;
                    true -> e_field_values_f32_values(TrF9, B8, TrUserData)
                 end;
             _ -> B8
         end,
    B10 = case M of
              #{f64_values := F10} ->
                  TrF10 = id(F10, TrUserData),
                  if TrF10 == [] -> B9;
                     true -> e_field_values_f64_values(TrF10, B9, TrUserData)
                  end;
              _ -> B9
          end,
    B11 = case M of
              #{bool_values := F11} ->
                  TrF11 = id(F11, TrUserData),
                  if TrF11 == [] -> B10;
                     true -> e_field_values_bool_values(TrF11, B10, TrUserData)
                  end;
              _ -> B10
          end,
    B12 = case M of
              #{binary_values := F12} ->
                  TrF12 = id(F12, TrUserData),
                  if TrF12 == [] -> B11;
                     true -> e_field_values_binary_values(TrF12, B11, TrUserData)
                  end;
              _ -> B11
          end,
    B13 = case M of
              #{string_values := F13} ->
                  TrF13 = id(F13, TrUserData),
                  if TrF13 == [] -> B12;
                     true -> e_field_values_string_values(TrF13, B12, TrUserData)
                  end;
              _ -> B12
          end,
    B14 = case M of
              #{date_values := F14} ->
                  TrF14 = id(F14, TrUserData),
                  if TrF14 == [] -> B13;
                     true -> e_field_values_date_values(TrF14, B13, TrUserData)
                  end;
              _ -> B13
          end,
    B15 = case M of
              #{datetime_values := F15} ->
                  TrF15 = id(F15, TrUserData),
                  if TrF15 == [] -> B14;
                     true -> e_field_values_datetime_values(TrF15, B14, TrUserData)
                  end;
              _ -> B14
          end,
    B16 = case M of
              #{ts_second_values := F16} ->
                  TrF16 = id(F16, TrUserData),
                  if TrF16 == [] -> B15;
                     true -> e_field_values_ts_second_values(TrF16, B15, TrUserData)
                  end;
              _ -> B15
          end,
    B17 = case M of
              #{ts_millisecond_values := F17} ->
                  TrF17 = id(F17, TrUserData),
                  if TrF17 == [] -> B16;
                     true -> e_field_values_ts_millisecond_values(TrF17, B16, TrUserData)
                  end;
              _ -> B16
          end,
    B18 = case M of
              #{ts_microsecond_values := F18} ->
                  TrF18 = id(F18, TrUserData),
                  if TrF18 == [] -> B17;
                     true -> e_field_values_ts_microsecond_values(TrF18, B17, TrUserData)
                  end;
              _ -> B17
          end,
    case M of
        #{ts_nanosecond_values := F19} ->
            TrF19 = id(F19, TrUserData),
            if TrF19 == [] -> B18;
               true -> e_field_values_ts_nanosecond_values(TrF19, B18, TrUserData)
            end;
        _ -> B18
    end.

encode_msg_column(Msg, TrUserData) -> encode_msg_column(Msg, <<>>, TrUserData).


encode_msg_column(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{column_name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{semantic_type := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'TAG'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_column.SemanticType'(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{values := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= undefined -> B2;
                        true -> e_mfield_column_values(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{null_mask := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case iolist_size(TrF4) of
                         0 -> B3;
                         _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{datatype := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 'BOOLEAN'; TrF5 =:= 0 -> B4;
                   true -> 'e_enum_greptime.v1.ColumnDataType'(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_column_def(Msg, TrUserData) -> encode_msg_column_def(Msg, <<>>, TrUserData).


encode_msg_column_def(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{datatype := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'BOOLEAN'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_greptime.v1.ColumnDataType'(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{is_nullable := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= false -> B2;
                        true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{default_constraint := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case iolist_size(TrF4) of
                    0 -> B3;
                    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

e_field_values_i8_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_i8_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_i8_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_i8_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_i8_values(Rest, Bin2, TrUserData);
e_pfield_values_i8_values([], Bin, _TrUserData) -> Bin.

e_field_values_i16_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_i16_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_i16_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_i16_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_i16_values(Rest, Bin2, TrUserData);
e_pfield_values_i16_values([], Bin, _TrUserData) -> Bin.

e_field_values_i32_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_i32_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_i32_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_i32_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_i32_values(Rest, Bin2, TrUserData);
e_pfield_values_i32_values([], Bin, _TrUserData) -> Bin.

e_field_values_i64_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_i64_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_i64_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_i64_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int64(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_i64_values(Rest, Bin2, TrUserData);
e_pfield_values_i64_values([], Bin, _TrUserData) -> Bin.

e_field_values_u8_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_u8_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_u8_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_u8_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_u8_values(Rest, Bin2, TrUserData);
e_pfield_values_u8_values([], Bin, _TrUserData) -> Bin.

e_field_values_u16_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_u16_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_u16_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_u16_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_u16_values(Rest, Bin2, TrUserData);
e_pfield_values_u16_values([], Bin, _TrUserData) -> Bin.

e_field_values_u32_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_u32_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_u32_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_u32_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_u32_values(Rest, Bin2, TrUserData);
e_pfield_values_u32_values([], Bin, _TrUserData) -> Bin.

e_field_values_u64_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_u64_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_u64_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_u64_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_u64_values(Rest, Bin2, TrUserData);
e_pfield_values_u64_values([], Bin, _TrUserData) -> Bin.

e_field_values_f32_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_varint(length(Elems) * 4, Bin2),
    e_pfield_values_f32_values(Elems, Bin3, TrUserData);
e_field_values_f32_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_f32_values([V | Rest], Bin, TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) -> <<Bin/binary, TrV:32/little-float>>;
              TrV =:= infinity -> <<Bin/binary, 0:16, 128, 127>>;
              TrV =:= '-infinity' -> <<Bin/binary, 0:16, 128, 255>>;
              TrV =:= nan -> <<Bin/binary, 0:16, 192, 127>>
           end,
    e_pfield_values_f32_values(Rest, Bin2, TrUserData);
e_pfield_values_f32_values([], Bin, _TrUserData) -> Bin.

e_field_values_f64_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_varint(length(Elems) * 8, Bin2),
    e_pfield_values_f64_values(Elems, Bin3, TrUserData);
e_field_values_f64_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_f64_values([V | Rest], Bin, TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) -> <<Bin/binary, TrV:64/float-little>>;
              TrV =:= infinity -> <<Bin/binary, 0:48, 240, 127>>;
              TrV =:= '-infinity' -> <<Bin/binary, 0:48, 240, 255>>;
              TrV =:= nan -> <<Bin/binary, 0:48, 248, 127>>
           end,
    e_pfield_values_f64_values(Rest, Bin2, TrUserData);
e_pfield_values_f64_values([], Bin, _TrUserData) -> Bin.

e_field_values_bool_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_bool_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_bool_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_bool_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_bool(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_bool_values(Rest, Bin2, TrUserData);
e_pfield_values_bool_values([], Bin, _TrUserData) -> Bin.

e_field_values_binary_values([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 98>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_values_binary_values(Rest, Bin3, TrUserData);
e_field_values_binary_values([], Bin, _TrUserData) -> Bin.

e_field_values_string_values([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 106>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_values_string_values(Rest, Bin3, TrUserData);
e_field_values_string_values([], Bin, _TrUserData) -> Bin.

e_field_values_date_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_date_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 114>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_date_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_date_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_date_values(Rest, Bin2, TrUserData);
e_pfield_values_date_values([], Bin, _TrUserData) -> Bin.

e_field_values_datetime_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_datetime_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 122>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_datetime_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_datetime_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int64(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_datetime_values(Rest, Bin2, TrUserData);
e_pfield_values_datetime_values([], Bin, _TrUserData) -> Bin.

e_field_values_ts_second_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_ts_second_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 130, 1>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_ts_second_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_ts_second_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int64(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_ts_second_values(Rest, Bin2, TrUserData);
e_pfield_values_ts_second_values([], Bin, _TrUserData) -> Bin.

e_field_values_ts_millisecond_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_ts_millisecond_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 138, 1>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_ts_millisecond_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_ts_millisecond_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int64(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_ts_millisecond_values(Rest, Bin2, TrUserData);
e_pfield_values_ts_millisecond_values([], Bin, _TrUserData) -> Bin.

e_field_values_ts_microsecond_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_ts_microsecond_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 146, 1>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_ts_microsecond_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_ts_microsecond_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int64(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_ts_microsecond_values(Rest, Bin2, TrUserData);
e_pfield_values_ts_microsecond_values([], Bin, _TrUserData) -> Bin.

e_field_values_ts_nanosecond_values(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_values_ts_nanosecond_values(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 154, 1>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_values_ts_nanosecond_values([], Bin, _TrUserData) -> Bin.

e_pfield_values_ts_nanosecond_values([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int64(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_values_ts_nanosecond_values(Rest, Bin2, TrUserData);
e_pfield_values_ts_nanosecond_values([], Bin, _TrUserData) -> Bin.

e_mfield_column_values(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_values(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_column.SemanticType'('TAG', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_column.SemanticType'('FIELD', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_column.SemanticType'('TIMESTAMP', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_column.SemanticType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_greptime.v1.ColumnDataType'('BOOLEAN', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_greptime.v1.ColumnDataType'('INT8', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_greptime.v1.ColumnDataType'('INT16', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_greptime.v1.ColumnDataType'('INT32', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_greptime.v1.ColumnDataType'('INT64', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_greptime.v1.ColumnDataType'('UINT8', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_greptime.v1.ColumnDataType'('UINT16', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_greptime.v1.ColumnDataType'('UINT32', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_greptime.v1.ColumnDataType'('UINT64', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_greptime.v1.ColumnDataType'('FLOAT32', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_greptime.v1.ColumnDataType'('FLOAT64', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_greptime.v1.ColumnDataType'('BINARY', Bin, _TrUserData) -> <<Bin/binary, 11>>;
'e_enum_greptime.v1.ColumnDataType'('STRING', Bin, _TrUserData) -> <<Bin/binary, 12>>;
'e_enum_greptime.v1.ColumnDataType'('DATE', Bin, _TrUserData) -> <<Bin/binary, 13>>;
'e_enum_greptime.v1.ColumnDataType'('DATETIME', Bin, _TrUserData) -> <<Bin/binary, 14>>;
'e_enum_greptime.v1.ColumnDataType'('TIMESTAMP_SECOND', Bin, _TrUserData) -> <<Bin/binary, 15>>;
'e_enum_greptime.v1.ColumnDataType'('TIMESTAMP_MILLISECOND', Bin, _TrUserData) -> <<Bin/binary, 16>>;
'e_enum_greptime.v1.ColumnDataType'('TIMESTAMP_MICROSECOND', Bin, _TrUserData) -> <<Bin/binary, 17>>;
'e_enum_greptime.v1.ColumnDataType'('TIMESTAMP_NANOSECOND', Bin, _TrUserData) -> <<Bin/binary, 18>>;
'e_enum_greptime.v1.ColumnDataType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(values, Bin, TrUserData) -> id(decode_msg_values(Bin, TrUserData), TrUserData);
decode_msg_2_doit(column, Bin, TrUserData) -> id(decode_msg_column(Bin, TrUserData), TrUserData);
decode_msg_2_doit(column_def, Bin, TrUserData) -> id(decode_msg_column_def(Bin, TrUserData), TrUserData).



decode_msg_values(Bin, TrUserData) ->
    dfp_read_field_def_values(Bin,
                              0,
                              0,
                              0,
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              id([], TrUserData),
                              TrUserData).

dfp_read_field_def_values(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_i8_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_i8_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_i16_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_i16_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_i32_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_i32_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_i64_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_i64_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_u8_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_u8_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_u16_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_u16_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_u32_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_u32_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<66, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_u64_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_u64_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<74, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_f32_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<77, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_f32_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<82, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_f64_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<81, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_f64_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<90, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_bool_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<88, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_bool_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<98, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_binary_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<106, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_string_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<114, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_date_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<112, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_date_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_datetime_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_datetime_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<130, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_ts_second_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<128, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_ts_second_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<138, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_ts_millisecond_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<136, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_ts_millisecond_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<146, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_ts_microsecond_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<144, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_ts_microsecond_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<154, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_values_ts_nanosecond_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<152, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_values_ts_nanosecond_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_values(<<>>, 0, 0, _, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, TrUserData) ->
    #{i8_values => lists_reverse(R1, TrUserData), i16_values => lists_reverse(R2, TrUserData), i32_values => lists_reverse(R3, TrUserData), i64_values => lists_reverse(R4, TrUserData), u8_values => lists_reverse(R5, TrUserData),
      u16_values => lists_reverse(R6, TrUserData), u32_values => lists_reverse(R7, TrUserData), u64_values => lists_reverse(R8, TrUserData), f32_values => lists_reverse(R9, TrUserData), f64_values => lists_reverse(R10, TrUserData),
      bool_values => lists_reverse(R11, TrUserData), binary_values => lists_reverse(R12, TrUserData), string_values => lists_reverse(R13, TrUserData), date_values => lists_reverse(R14, TrUserData), datetime_values => lists_reverse(R15, TrUserData),
      ts_second_values => lists_reverse(R16, TrUserData), ts_millisecond_values => lists_reverse(R17, TrUserData), ts_microsecond_values => lists_reverse(R18, TrUserData), ts_nanosecond_values => lists_reverse(R19, TrUserData)};
dfp_read_field_def_values(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dg_read_field_def_values(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

dg_read_field_def_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dg_read_field_def_values(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_pfield_values_i8_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        8 -> d_field_values_i8_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        18 -> d_pfield_values_i16_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        16 -> d_field_values_i16_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        26 -> d_pfield_values_i32_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        24 -> d_field_values_i32_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        34 -> d_pfield_values_i64_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        32 -> d_field_values_i64_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        42 -> d_pfield_values_u8_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        40 -> d_field_values_u8_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        50 -> d_pfield_values_u16_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        48 -> d_field_values_u16_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        58 -> d_pfield_values_u32_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        56 -> d_field_values_u32_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        66 -> d_pfield_values_u64_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        64 -> d_field_values_u64_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        74 -> d_pfield_values_f32_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        77 -> d_field_values_f32_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        82 -> d_pfield_values_f64_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        81 -> d_field_values_f64_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        90 -> d_pfield_values_bool_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        88 -> d_field_values_bool_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        98 -> d_field_values_binary_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        106 -> d_field_values_string_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        114 -> d_pfield_values_date_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        112 -> d_field_values_date_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        122 -> d_pfield_values_datetime_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        120 -> d_field_values_datetime_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        130 -> d_pfield_values_ts_second_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        128 -> d_field_values_ts_second_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        138 -> d_pfield_values_ts_millisecond_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        136 -> d_field_values_ts_millisecond_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        146 -> d_pfield_values_ts_microsecond_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        144 -> d_field_values_ts_microsecond_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        154 -> d_pfield_values_ts_nanosecond_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        152 -> d_field_values_ts_nanosecond_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_values(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                1 -> skip_64_values(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                2 -> skip_length_delimited_values(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                3 -> skip_group_values(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                5 -> skip_32_values(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData)
            end
    end;
dg_read_field_def_values(<<>>, 0, 0, _, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, TrUserData) ->
    #{i8_values => lists_reverse(R1, TrUserData), i16_values => lists_reverse(R2, TrUserData), i32_values => lists_reverse(R3, TrUserData), i64_values => lists_reverse(R4, TrUserData), u8_values => lists_reverse(R5, TrUserData),
      u16_values => lists_reverse(R6, TrUserData), u32_values => lists_reverse(R7, TrUserData), u64_values => lists_reverse(R8, TrUserData), f32_values => lists_reverse(R9, TrUserData), f64_values => lists_reverse(R10, TrUserData),
      bool_values => lists_reverse(R11, TrUserData), binary_values => lists_reverse(R12, TrUserData), string_values => lists_reverse(R13, TrUserData), date_values => lists_reverse(R14, TrUserData), datetime_values => lists_reverse(R15, TrUserData),
      ts_second_values => lists_reverse(R16, TrUserData), ts_millisecond_values => lists_reverse(R17, TrUserData), ts_microsecond_values => lists_reverse(R18, TrUserData), ts_nanosecond_values => lists_reverse(R19, TrUserData)}.

d_field_values_i8_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_i8_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_i8_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_i8_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_i8_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_i8_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, E, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_i8_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, NewSeq, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_i8_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_i8_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_i8_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_i8_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_i8_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_i16_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_i16_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_i16_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_i16_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_i16_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_i16_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_i16_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_i16_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_i16_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_i16_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_i16_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_i16_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_i32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_i32_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_i32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_i32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_i32_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_i32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, E, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_i32_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, NewSeq, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_i32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_i32_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_i32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_i32_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_i32_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_i64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_i64_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_i64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_i64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_i64_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_i64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, E, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_i64_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, NewSeq, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_i64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_i64_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_i64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_i64_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_i64_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_u8_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_u8_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_u8_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_u8_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_u8_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_u8_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, E, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_u8_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewSeq, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_u8_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_u8_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_u8_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_values_u8_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_u8_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_u16_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_u16_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_u16_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_u16_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_u16_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_u16_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, E, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_u16_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewSeq, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_u16_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_u16_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_u16_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_values_u16_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_u16_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_u32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_u32_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_u32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, cons(NewFValue, Prev, TrUserData), F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_u32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_u32_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_u32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, E, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_u32_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewSeq, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_u32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_u32_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_u32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_values_u32_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_u32_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_u64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_u64_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_u64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, cons(NewFValue, Prev, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_u64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_u64_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_u64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, E, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_u64_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewSeq, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_u64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_u64_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_u64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    d_packed_field_values_u64_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_u64_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_f32_values(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(id(infinity, TrUserData), Prev, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_f32_values(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(id('-infinity', TrUserData), Prev, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_f32_values(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(id(nan, TrUserData), Prev, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_f32_values(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, cons(id(Value, TrUserData), Prev, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_f32_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_f32_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_f32_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, E, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_f32_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewSeq, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_f32_values(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f32_values(Rest, Z1, Z2, F, cons(id(infinity, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f32_values(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f32_values(Rest, Z1, Z2, F, cons(id('-infinity', TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f32_values(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f32_values(Rest, Z1, Z2, F, cons(id(nan, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f32_values(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f32_values(Rest, Z1, Z2, F, cons(id(Value, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f32_values(<<>>, _, _, _, AccSeq, _) -> AccSeq.

d_field_values_f64_values(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(id(infinity, TrUserData), Prev, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_f64_values(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(id('-infinity', TrUserData), Prev, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_f64_values(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(id(nan, TrUserData), Prev, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_f64_values(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(id(Value, TrUserData), Prev, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_f64_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_f64_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_f64_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, E, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_f64_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewSeq, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_f64_values(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f64_values(Rest, Z1, Z2, F, cons(id(infinity, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f64_values(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f64_values(Rest, Z1, Z2, F, cons(id('-infinity', TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f64_values(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f64_values(Rest, Z1, Z2, F, cons(id(nan, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f64_values(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_values_f64_values(Rest, Z1, Z2, F, cons(id(Value, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_values_f64_values(<<>>, _, _, _, AccSeq, _) -> AccSeq.

d_field_values_bool_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_bool_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_bool_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, Prev, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, cons(NewFValue, Prev, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_bool_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_bool_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_bool_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, E, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_bool_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewSeq, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_bool_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_bool_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_bool_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    d_packed_field_values_bool_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_bool_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_binary_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_binary_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_binary_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, Prev, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, cons(NewFValue, Prev, TrUserData), F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_values_string_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_string_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_string_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, Prev, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, cons(NewFValue, Prev, TrUserData), F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_values_date_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_date_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_date_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, Prev, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, cons(NewFValue, Prev, TrUserData), F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_date_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_date_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_date_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, E, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_date_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewSeq, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_date_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_date_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_date_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_date_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_date_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_datetime_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_datetime_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_datetime_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, Prev, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, cons(NewFValue, Prev, TrUserData), F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_datetime_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_datetime_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_datetime_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, E, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_datetime_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, NewSeq, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_datetime_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_datetime_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_datetime_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_datetime_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_datetime_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_ts_second_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_ts_second_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_ts_second_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, Prev, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, cons(NewFValue, Prev, TrUserData), F@_17, F@_18, F@_19, TrUserData).

d_pfield_values_ts_second_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_ts_second_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_ts_second_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, E, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_ts_second_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, NewSeq, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_values_ts_second_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_ts_second_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_ts_second_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_ts_second_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_ts_second_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_ts_millisecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_ts_millisecond_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_ts_millisecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, Prev, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, cons(NewFValue, Prev, TrUserData), F@_18, F@_19, TrUserData).

d_pfield_values_ts_millisecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_ts_millisecond_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_ts_millisecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, E, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_ts_millisecond_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, NewSeq, F@_18, F@_19, TrUserData).

d_packed_field_values_ts_millisecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_ts_millisecond_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_ts_millisecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_ts_millisecond_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_ts_millisecond_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_ts_microsecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_ts_microsecond_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_ts_microsecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, Prev, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, cons(NewFValue, Prev, TrUserData), F@_19, TrUserData).

d_pfield_values_ts_microsecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_ts_microsecond_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_ts_microsecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, E, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_ts_microsecond_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, NewSeq, F@_19, TrUserData).

d_packed_field_values_ts_microsecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_ts_microsecond_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_ts_microsecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_ts_microsecond_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_ts_microsecond_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_values_ts_nanosecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_values_ts_nanosecond_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_values_ts_nanosecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_values(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_values_ts_nanosecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_values_ts_nanosecond_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_values_ts_nanosecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_values_ts_nanosecond_values(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, NewSeq, TrUserData).

d_packed_field_values_ts_nanosecond_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_values_ts_nanosecond_values(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_values_ts_nanosecond_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_values_ts_nanosecond_values(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_values_ts_nanosecond_values(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

skip_varint_values(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    skip_varint_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
skip_varint_values(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_length_delimited_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    skip_length_delimited_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
skip_length_delimited_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_values(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_group_values(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_values(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_32_values(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_64_values(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

decode_msg_column(Bin, TrUserData) -> dfp_read_field_def_column(Bin, 0, 0, 0, id(<<>>, TrUserData), id('TAG', TrUserData), id('$undef', TrUserData), id(<<>>, TrUserData), id('BOOLEAN', TrUserData), TrUserData).

dfp_read_field_def_column(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_column_column_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_column(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_column_semantic_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_column(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_column_values(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_column(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_column_null_mask(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_column(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_column_datatype(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_column(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{column_name => F@_1, semantic_type => F@_2, null_mask => F@_4, datatype => F@_5},
    if F@_3 == '$undef' -> S1;
       true -> S1#{values => F@_3}
    end;
dfp_read_field_def_column(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_column(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_column(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_column(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_column(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_column_column_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_column_semantic_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_column_values(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_column_null_mask(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_column_datatype(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_column(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_column(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_column(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_column(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_column(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_column(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{column_name => F@_1, semantic_type => F@_2, null_mask => F@_4, datatype => F@_5},
    if F@_3 == '$undef' -> S1;
       true -> S1#{values => F@_3}
    end.

d_field_column_column_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_column_column_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_column_column_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_column(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_column_semantic_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_column_semantic_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_column_semantic_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_column.SemanticType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_column(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_column_values(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_column_values(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_column_values(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_values(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_column(RestF,
                              0,
                              0,
                              F,
                              F@_1,
                              F@_2,
                              if Prev == '$undef' -> NewFValue;
                                 true -> merge_msg_values(Prev, NewFValue, TrUserData)
                              end,
                              F@_4,
                              F@_5,
                              TrUserData).

d_field_column_null_mask(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_column_null_mask(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_column_null_mask(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_column(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_column_datatype(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_column_datatype(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_column_datatype(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_greptime.v1.ColumnDataType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_column(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_column(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_column(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_column(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_column(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_column(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_column(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_column(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_column(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_column(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_column(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_column(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_column(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_column(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_column(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_column_def(Bin, TrUserData) -> dfp_read_field_def_column_def(Bin, 0, 0, 0, id(<<>>, TrUserData), id('BOOLEAN', TrUserData), id(false, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_column_def(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_column_def_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_column_def(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_column_def_datatype(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_column_def(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_column_def_is_nullable(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_column_def(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_column_def_default_constraint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_column_def(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{name => F@_1, datatype => F@_2, is_nullable => F@_3, default_constraint => F@_4};
dfp_read_field_def_column_def(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_column_def(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_column_def(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_column_def(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_column_def(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_column_def_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_column_def_datatype(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_column_def_is_nullable(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_column_def_default_constraint(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_column_def(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_column_def(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_column_def(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_column_def(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_column_def(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_column_def(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{name => F@_1, datatype => F@_2, is_nullable => F@_3, default_constraint => F@_4}.

d_field_column_def_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_column_def_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_column_def_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_column_def(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_column_def_datatype(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_column_def_datatype(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_column_def_datatype(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_greptime.v1.ColumnDataType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_column_def(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_column_def_is_nullable(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_column_def_is_nullable(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_column_def_is_nullable(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_column_def(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_column_def_default_constraint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_column_def_default_constraint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_column_def_default_constraint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_column_def(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_column_def(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_column_def(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_column_def(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_column_def(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_column_def(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_column_def(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_column_def(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_column_def(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_column_def(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_column_def(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_column_def(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_column_def(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_column_def(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_column_def(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'd_enum_column.SemanticType'(0) -> 'TAG';
'd_enum_column.SemanticType'(1) -> 'FIELD';
'd_enum_column.SemanticType'(2) -> 'TIMESTAMP';
'd_enum_column.SemanticType'(V) -> V.

'd_enum_greptime.v1.ColumnDataType'(0) -> 'BOOLEAN';
'd_enum_greptime.v1.ColumnDataType'(1) -> 'INT8';
'd_enum_greptime.v1.ColumnDataType'(2) -> 'INT16';
'd_enum_greptime.v1.ColumnDataType'(3) -> 'INT32';
'd_enum_greptime.v1.ColumnDataType'(4) -> 'INT64';
'd_enum_greptime.v1.ColumnDataType'(5) -> 'UINT8';
'd_enum_greptime.v1.ColumnDataType'(6) -> 'UINT16';
'd_enum_greptime.v1.ColumnDataType'(7) -> 'UINT32';
'd_enum_greptime.v1.ColumnDataType'(8) -> 'UINT64';
'd_enum_greptime.v1.ColumnDataType'(9) -> 'FLOAT32';
'd_enum_greptime.v1.ColumnDataType'(10) -> 'FLOAT64';
'd_enum_greptime.v1.ColumnDataType'(11) -> 'BINARY';
'd_enum_greptime.v1.ColumnDataType'(12) -> 'STRING';
'd_enum_greptime.v1.ColumnDataType'(13) -> 'DATE';
'd_enum_greptime.v1.ColumnDataType'(14) -> 'DATETIME';
'd_enum_greptime.v1.ColumnDataType'(15) -> 'TIMESTAMP_SECOND';
'd_enum_greptime.v1.ColumnDataType'(16) -> 'TIMESTAMP_MILLISECOND';
'd_enum_greptime.v1.ColumnDataType'(17) -> 'TIMESTAMP_MICROSECOND';
'd_enum_greptime.v1.ColumnDataType'(18) -> 'TIMESTAMP_NANOSECOND';
'd_enum_greptime.v1.ColumnDataType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        values -> merge_msg_values(Prev, New, TrUserData);
        column -> merge_msg_column(Prev, New, TrUserData);
        column_def -> merge_msg_column_def(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_values/3}).
merge_msg_values(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{i8_values := PFi8_values}, #{i8_values := NFi8_values}} -> S1#{i8_values => 'erlang_++'(PFi8_values, NFi8_values, TrUserData)};
             {_, #{i8_values := NFi8_values}} -> S1#{i8_values => NFi8_values};
             {#{i8_values := PFi8_values}, _} -> S1#{i8_values => PFi8_values};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{i16_values := PFi16_values}, #{i16_values := NFi16_values}} -> S2#{i16_values => 'erlang_++'(PFi16_values, NFi16_values, TrUserData)};
             {_, #{i16_values := NFi16_values}} -> S2#{i16_values => NFi16_values};
             {#{i16_values := PFi16_values}, _} -> S2#{i16_values => PFi16_values};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{i32_values := PFi32_values}, #{i32_values := NFi32_values}} -> S3#{i32_values => 'erlang_++'(PFi32_values, NFi32_values, TrUserData)};
             {_, #{i32_values := NFi32_values}} -> S3#{i32_values => NFi32_values};
             {#{i32_values := PFi32_values}, _} -> S3#{i32_values => PFi32_values};
             {_, _} -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {#{i64_values := PFi64_values}, #{i64_values := NFi64_values}} -> S4#{i64_values => 'erlang_++'(PFi64_values, NFi64_values, TrUserData)};
             {_, #{i64_values := NFi64_values}} -> S4#{i64_values => NFi64_values};
             {#{i64_values := PFi64_values}, _} -> S4#{i64_values => PFi64_values};
             {_, _} -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {#{u8_values := PFu8_values}, #{u8_values := NFu8_values}} -> S5#{u8_values => 'erlang_++'(PFu8_values, NFu8_values, TrUserData)};
             {_, #{u8_values := NFu8_values}} -> S5#{u8_values => NFu8_values};
             {#{u8_values := PFu8_values}, _} -> S5#{u8_values => PFu8_values};
             {_, _} -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {#{u16_values := PFu16_values}, #{u16_values := NFu16_values}} -> S6#{u16_values => 'erlang_++'(PFu16_values, NFu16_values, TrUserData)};
             {_, #{u16_values := NFu16_values}} -> S6#{u16_values => NFu16_values};
             {#{u16_values := PFu16_values}, _} -> S6#{u16_values => PFu16_values};
             {_, _} -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {#{u32_values := PFu32_values}, #{u32_values := NFu32_values}} -> S7#{u32_values => 'erlang_++'(PFu32_values, NFu32_values, TrUserData)};
             {_, #{u32_values := NFu32_values}} -> S7#{u32_values => NFu32_values};
             {#{u32_values := PFu32_values}, _} -> S7#{u32_values => PFu32_values};
             {_, _} -> S7
         end,
    S9 = case {PMsg, NMsg} of
             {#{u64_values := PFu64_values}, #{u64_values := NFu64_values}} -> S8#{u64_values => 'erlang_++'(PFu64_values, NFu64_values, TrUserData)};
             {_, #{u64_values := NFu64_values}} -> S8#{u64_values => NFu64_values};
             {#{u64_values := PFu64_values}, _} -> S8#{u64_values => PFu64_values};
             {_, _} -> S8
         end,
    S10 = case {PMsg, NMsg} of
              {#{f32_values := PFf32_values}, #{f32_values := NFf32_values}} -> S9#{f32_values => 'erlang_++'(PFf32_values, NFf32_values, TrUserData)};
              {_, #{f32_values := NFf32_values}} -> S9#{f32_values => NFf32_values};
              {#{f32_values := PFf32_values}, _} -> S9#{f32_values => PFf32_values};
              {_, _} -> S9
          end,
    S11 = case {PMsg, NMsg} of
              {#{f64_values := PFf64_values}, #{f64_values := NFf64_values}} -> S10#{f64_values => 'erlang_++'(PFf64_values, NFf64_values, TrUserData)};
              {_, #{f64_values := NFf64_values}} -> S10#{f64_values => NFf64_values};
              {#{f64_values := PFf64_values}, _} -> S10#{f64_values => PFf64_values};
              {_, _} -> S10
          end,
    S12 = case {PMsg, NMsg} of
              {#{bool_values := PFbool_values}, #{bool_values := NFbool_values}} -> S11#{bool_values => 'erlang_++'(PFbool_values, NFbool_values, TrUserData)};
              {_, #{bool_values := NFbool_values}} -> S11#{bool_values => NFbool_values};
              {#{bool_values := PFbool_values}, _} -> S11#{bool_values => PFbool_values};
              {_, _} -> S11
          end,
    S13 = case {PMsg, NMsg} of
              {#{binary_values := PFbinary_values}, #{binary_values := NFbinary_values}} -> S12#{binary_values => 'erlang_++'(PFbinary_values, NFbinary_values, TrUserData)};
              {_, #{binary_values := NFbinary_values}} -> S12#{binary_values => NFbinary_values};
              {#{binary_values := PFbinary_values}, _} -> S12#{binary_values => PFbinary_values};
              {_, _} -> S12
          end,
    S14 = case {PMsg, NMsg} of
              {#{string_values := PFstring_values}, #{string_values := NFstring_values}} -> S13#{string_values => 'erlang_++'(PFstring_values, NFstring_values, TrUserData)};
              {_, #{string_values := NFstring_values}} -> S13#{string_values => NFstring_values};
              {#{string_values := PFstring_values}, _} -> S13#{string_values => PFstring_values};
              {_, _} -> S13
          end,
    S15 = case {PMsg, NMsg} of
              {#{date_values := PFdate_values}, #{date_values := NFdate_values}} -> S14#{date_values => 'erlang_++'(PFdate_values, NFdate_values, TrUserData)};
              {_, #{date_values := NFdate_values}} -> S14#{date_values => NFdate_values};
              {#{date_values := PFdate_values}, _} -> S14#{date_values => PFdate_values};
              {_, _} -> S14
          end,
    S16 = case {PMsg, NMsg} of
              {#{datetime_values := PFdatetime_values}, #{datetime_values := NFdatetime_values}} -> S15#{datetime_values => 'erlang_++'(PFdatetime_values, NFdatetime_values, TrUserData)};
              {_, #{datetime_values := NFdatetime_values}} -> S15#{datetime_values => NFdatetime_values};
              {#{datetime_values := PFdatetime_values}, _} -> S15#{datetime_values => PFdatetime_values};
              {_, _} -> S15
          end,
    S17 = case {PMsg, NMsg} of
              {#{ts_second_values := PFts_second_values}, #{ts_second_values := NFts_second_values}} -> S16#{ts_second_values => 'erlang_++'(PFts_second_values, NFts_second_values, TrUserData)};
              {_, #{ts_second_values := NFts_second_values}} -> S16#{ts_second_values => NFts_second_values};
              {#{ts_second_values := PFts_second_values}, _} -> S16#{ts_second_values => PFts_second_values};
              {_, _} -> S16
          end,
    S18 = case {PMsg, NMsg} of
              {#{ts_millisecond_values := PFts_millisecond_values}, #{ts_millisecond_values := NFts_millisecond_values}} -> S17#{ts_millisecond_values => 'erlang_++'(PFts_millisecond_values, NFts_millisecond_values, TrUserData)};
              {_, #{ts_millisecond_values := NFts_millisecond_values}} -> S17#{ts_millisecond_values => NFts_millisecond_values};
              {#{ts_millisecond_values := PFts_millisecond_values}, _} -> S17#{ts_millisecond_values => PFts_millisecond_values};
              {_, _} -> S17
          end,
    S19 = case {PMsg, NMsg} of
              {#{ts_microsecond_values := PFts_microsecond_values}, #{ts_microsecond_values := NFts_microsecond_values}} -> S18#{ts_microsecond_values => 'erlang_++'(PFts_microsecond_values, NFts_microsecond_values, TrUserData)};
              {_, #{ts_microsecond_values := NFts_microsecond_values}} -> S18#{ts_microsecond_values => NFts_microsecond_values};
              {#{ts_microsecond_values := PFts_microsecond_values}, _} -> S18#{ts_microsecond_values => PFts_microsecond_values};
              {_, _} -> S18
          end,
    case {PMsg, NMsg} of
        {#{ts_nanosecond_values := PFts_nanosecond_values}, #{ts_nanosecond_values := NFts_nanosecond_values}} -> S19#{ts_nanosecond_values => 'erlang_++'(PFts_nanosecond_values, NFts_nanosecond_values, TrUserData)};
        {_, #{ts_nanosecond_values := NFts_nanosecond_values}} -> S19#{ts_nanosecond_values => NFts_nanosecond_values};
        {#{ts_nanosecond_values := PFts_nanosecond_values}, _} -> S19#{ts_nanosecond_values => PFts_nanosecond_values};
        {_, _} -> S19
    end.

-compile({nowarn_unused_function,merge_msg_column/3}).
merge_msg_column(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{column_name := NFcolumn_name}} -> S1#{column_name => NFcolumn_name};
             {#{column_name := PFcolumn_name}, _} -> S1#{column_name => PFcolumn_name};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{semantic_type := NFsemantic_type}} -> S2#{semantic_type => NFsemantic_type};
             {#{semantic_type := PFsemantic_type}, _} -> S2#{semantic_type => PFsemantic_type};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{values := PFvalues}, #{values := NFvalues}} -> S3#{values => merge_msg_values(PFvalues, NFvalues, TrUserData)};
             {_, #{values := NFvalues}} -> S3#{values => NFvalues};
             {#{values := PFvalues}, _} -> S3#{values => PFvalues};
             {_, _} -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{null_mask := NFnull_mask}} -> S4#{null_mask => NFnull_mask};
             {#{null_mask := PFnull_mask}, _} -> S4#{null_mask => PFnull_mask};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{datatype := NFdatatype}} -> S5#{datatype => NFdatatype};
        {#{datatype := PFdatatype}, _} -> S5#{datatype => PFdatatype};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_column_def/3}).
merge_msg_column_def(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{datatype := NFdatatype}} -> S2#{datatype => NFdatatype};
             {#{datatype := PFdatatype}, _} -> S2#{datatype => PFdatatype};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{is_nullable := NFis_nullable}} -> S3#{is_nullable => NFis_nullable};
             {#{is_nullable := PFis_nullable}, _} -> S3#{is_nullable => PFis_nullable};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{default_constraint := NFdefault_constraint}} -> S4#{default_constraint => NFdefault_constraint};
        {#{default_constraint := PFdefault_constraint}, _} -> S4#{default_constraint => PFdefault_constraint};
        _ -> S4
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        values -> v_msg_values(Msg, [MsgName], TrUserData);
        column -> v_msg_column(Msg, [MsgName], TrUserData);
        column_def -> v_msg_column_def(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_values/3}).
-dialyzer({nowarn_function,v_msg_values/3}).
v_msg_values(#{} = M, Path, TrUserData) ->
    case M of
        #{i8_values := F1} ->
            if is_list(F1) ->
                   _ = [v_type_int32(Elem, [i8_values | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, int32}, F1, [i8_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{i16_values := F2} ->
            if is_list(F2) ->
                   _ = [v_type_int32(Elem, [i16_values | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, int32}, F2, [i16_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{i32_values := F3} ->
            if is_list(F3) ->
                   _ = [v_type_int32(Elem, [i32_values | Path], TrUserData) || Elem <- F3],
                   ok;
               true -> mk_type_error({invalid_list_of, int32}, F3, [i32_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{i64_values := F4} ->
            if is_list(F4) ->
                   _ = [v_type_int64(Elem, [i64_values | Path], TrUserData) || Elem <- F4],
                   ok;
               true -> mk_type_error({invalid_list_of, int64}, F4, [i64_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{u8_values := F5} ->
            if is_list(F5) ->
                   _ = [v_type_uint32(Elem, [u8_values | Path], TrUserData) || Elem <- F5],
                   ok;
               true -> mk_type_error({invalid_list_of, uint32}, F5, [u8_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{u16_values := F6} ->
            if is_list(F6) ->
                   _ = [v_type_uint32(Elem, [u16_values | Path], TrUserData) || Elem <- F6],
                   ok;
               true -> mk_type_error({invalid_list_of, uint32}, F6, [u16_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{u32_values := F7} ->
            if is_list(F7) ->
                   _ = [v_type_uint32(Elem, [u32_values | Path], TrUserData) || Elem <- F7],
                   ok;
               true -> mk_type_error({invalid_list_of, uint32}, F7, [u32_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{u64_values := F8} ->
            if is_list(F8) ->
                   _ = [v_type_uint64(Elem, [u64_values | Path], TrUserData) || Elem <- F8],
                   ok;
               true -> mk_type_error({invalid_list_of, uint64}, F8, [u64_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{f32_values := F9} ->
            if is_list(F9) ->
                   _ = [v_type_float(Elem, [f32_values | Path], TrUserData) || Elem <- F9],
                   ok;
               true -> mk_type_error({invalid_list_of, float}, F9, [f32_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{f64_values := F10} ->
            if is_list(F10) ->
                   _ = [v_type_double(Elem, [f64_values | Path], TrUserData) || Elem <- F10],
                   ok;
               true -> mk_type_error({invalid_list_of, double}, F10, [f64_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{bool_values := F11} ->
            if is_list(F11) ->
                   _ = [v_type_bool(Elem, [bool_values | Path], TrUserData) || Elem <- F11],
                   ok;
               true -> mk_type_error({invalid_list_of, bool}, F11, [bool_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{binary_values := F12} ->
            if is_list(F12) ->
                   _ = [v_type_bytes(Elem, [binary_values | Path], TrUserData) || Elem <- F12],
                   ok;
               true -> mk_type_error({invalid_list_of, bytes}, F12, [binary_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{string_values := F13} ->
            if is_list(F13) ->
                   _ = [v_type_string(Elem, [string_values | Path], TrUserData) || Elem <- F13],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F13, [string_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{date_values := F14} ->
            if is_list(F14) ->
                   _ = [v_type_int32(Elem, [date_values | Path], TrUserData) || Elem <- F14],
                   ok;
               true -> mk_type_error({invalid_list_of, int32}, F14, [date_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{datetime_values := F15} ->
            if is_list(F15) ->
                   _ = [v_type_int64(Elem, [datetime_values | Path], TrUserData) || Elem <- F15],
                   ok;
               true -> mk_type_error({invalid_list_of, int64}, F15, [datetime_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{ts_second_values := F16} ->
            if is_list(F16) ->
                   _ = [v_type_int64(Elem, [ts_second_values | Path], TrUserData) || Elem <- F16],
                   ok;
               true -> mk_type_error({invalid_list_of, int64}, F16, [ts_second_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{ts_millisecond_values := F17} ->
            if is_list(F17) ->
                   _ = [v_type_int64(Elem, [ts_millisecond_values | Path], TrUserData) || Elem <- F17],
                   ok;
               true -> mk_type_error({invalid_list_of, int64}, F17, [ts_millisecond_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{ts_microsecond_values := F18} ->
            if is_list(F18) ->
                   _ = [v_type_int64(Elem, [ts_microsecond_values | Path], TrUserData) || Elem <- F18],
                   ok;
               true -> mk_type_error({invalid_list_of, int64}, F18, [ts_microsecond_values | Path])
            end;
        _ -> ok
    end,
    case M of
        #{ts_nanosecond_values := F19} ->
            if is_list(F19) ->
                   _ = [v_type_int64(Elem, [ts_nanosecond_values | Path], TrUserData) || Elem <- F19],
                   ok;
               true -> mk_type_error({invalid_list_of, int64}, F19, [ts_nanosecond_values | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (i8_values) -> ok;
                      (i16_values) -> ok;
                      (i32_values) -> ok;
                      (i64_values) -> ok;
                      (u8_values) -> ok;
                      (u16_values) -> ok;
                      (u32_values) -> ok;
                      (u64_values) -> ok;
                      (f32_values) -> ok;
                      (f64_values) -> ok;
                      (bool_values) -> ok;
                      (binary_values) -> ok;
                      (string_values) -> ok;
                      (date_values) -> ok;
                      (datetime_values) -> ok;
                      (ts_second_values) -> ok;
                      (ts_millisecond_values) -> ok;
                      (ts_microsecond_values) -> ok;
                      (ts_nanosecond_values) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_values(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), values}, M, Path);
v_msg_values(X, Path, _TrUserData) -> mk_type_error({expected_msg, values}, X, Path).

-compile({nowarn_unused_function,v_msg_column/3}).
-dialyzer({nowarn_function,v_msg_column/3}).
v_msg_column(#{} = M, Path, TrUserData) ->
    case M of
        #{column_name := F1} -> v_type_string(F1, [column_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{semantic_type := F2} -> 'v_enum_column.SemanticType'(F2, [semantic_type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{values := F3} -> v_msg_values(F3, [values | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{null_mask := F4} -> v_type_bytes(F4, [null_mask | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{datatype := F5} -> 'v_enum_greptime.v1.ColumnDataType'(F5, [datatype | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (column_name) -> ok;
                      (semantic_type) -> ok;
                      (values) -> ok;
                      (null_mask) -> ok;
                      (datatype) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_column(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), column}, M, Path);
v_msg_column(X, Path, _TrUserData) -> mk_type_error({expected_msg, column}, X, Path).

-compile({nowarn_unused_function,v_msg_column_def/3}).
-dialyzer({nowarn_function,v_msg_column_def/3}).
v_msg_column_def(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{datatype := F2} -> 'v_enum_greptime.v1.ColumnDataType'(F2, [datatype | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{is_nullable := F3} -> v_type_bool(F3, [is_nullable | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{default_constraint := F4} -> v_type_bytes(F4, [default_constraint | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (datatype) -> ok;
                      (is_nullable) -> ok;
                      (default_constraint) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_column_def(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), column_def}, M, Path);
v_msg_column_def(X, Path, _TrUserData) -> mk_type_error({expected_msg, column_def}, X, Path).

-compile({nowarn_unused_function,'v_enum_column.SemanticType'/3}).
-dialyzer({nowarn_function,'v_enum_column.SemanticType'/3}).
'v_enum_column.SemanticType'('TAG', _Path, _TrUserData) -> ok;
'v_enum_column.SemanticType'('FIELD', _Path, _TrUserData) -> ok;
'v_enum_column.SemanticType'('TIMESTAMP', _Path, _TrUserData) -> ok;
'v_enum_column.SemanticType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_column.SemanticType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'column.SemanticType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_greptime.v1.ColumnDataType'/3}).
-dialyzer({nowarn_function,'v_enum_greptime.v1.ColumnDataType'/3}).
'v_enum_greptime.v1.ColumnDataType'('BOOLEAN', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('INT8', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('INT16', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('INT32', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('INT64', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('UINT8', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('UINT16', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('UINT32', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('UINT64', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('FLOAT32', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('FLOAT64', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('BINARY', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('STRING', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('DATE', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('DATETIME', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('TIMESTAMP_SECOND', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('TIMESTAMP_MILLISECOND', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('TIMESTAMP_MICROSECOND', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'('TIMESTAMP_NANOSECOND', _Path, _TrUserData) -> ok;
'v_enum_greptime.v1.ColumnDataType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_greptime.v1.ColumnDataType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'greptime.v1.ColumnDataType'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) -> mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'column.SemanticType'}, [{'TAG', 0}, {'FIELD', 1}, {'TIMESTAMP', 2}]},
     {{enum, 'greptime.v1.ColumnDataType'},
      [{'BOOLEAN', 0},
       {'INT8', 1},
       {'INT16', 2},
       {'INT32', 3},
       {'INT64', 4},
       {'UINT8', 5},
       {'UINT16', 6},
       {'UINT32', 7},
       {'UINT64', 8},
       {'FLOAT32', 9},
       {'FLOAT64', 10},
       {'BINARY', 11},
       {'STRING', 12},
       {'DATE', 13},
       {'DATETIME', 14},
       {'TIMESTAMP_SECOND', 15},
       {'TIMESTAMP_MILLISECOND', 16},
       {'TIMESTAMP_MICROSECOND', 17},
       {'TIMESTAMP_NANOSECOND', 18}]},
     {{msg, values},
      [#{name => i8_values, fnum => 1, rnum => 2, type => int32, occurrence => repeated, opts => [packed]},
       #{name => i16_values, fnum => 2, rnum => 3, type => int32, occurrence => repeated, opts => [packed]},
       #{name => i32_values, fnum => 3, rnum => 4, type => int32, occurrence => repeated, opts => [packed]},
       #{name => i64_values, fnum => 4, rnum => 5, type => int64, occurrence => repeated, opts => [packed]},
       #{name => u8_values, fnum => 5, rnum => 6, type => uint32, occurrence => repeated, opts => [packed]},
       #{name => u16_values, fnum => 6, rnum => 7, type => uint32, occurrence => repeated, opts => [packed]},
       #{name => u32_values, fnum => 7, rnum => 8, type => uint32, occurrence => repeated, opts => [packed]},
       #{name => u64_values, fnum => 8, rnum => 9, type => uint64, occurrence => repeated, opts => [packed]},
       #{name => f32_values, fnum => 9, rnum => 10, type => float, occurrence => repeated, opts => [packed]},
       #{name => f64_values, fnum => 10, rnum => 11, type => double, occurrence => repeated, opts => [packed]},
       #{name => bool_values, fnum => 11, rnum => 12, type => bool, occurrence => repeated, opts => [packed]},
       #{name => binary_values, fnum => 12, rnum => 13, type => bytes, occurrence => repeated, opts => []},
       #{name => string_values, fnum => 13, rnum => 14, type => string, occurrence => repeated, opts => []},
       #{name => date_values, fnum => 14, rnum => 15, type => int32, occurrence => repeated, opts => [packed]},
       #{name => datetime_values, fnum => 15, rnum => 16, type => int64, occurrence => repeated, opts => [packed]},
       #{name => ts_second_values, fnum => 16, rnum => 17, type => int64, occurrence => repeated, opts => [packed]},
       #{name => ts_millisecond_values, fnum => 17, rnum => 18, type => int64, occurrence => repeated, opts => [packed]},
       #{name => ts_microsecond_values, fnum => 18, rnum => 19, type => int64, occurrence => repeated, opts => [packed]},
       #{name => ts_nanosecond_values, fnum => 19, rnum => 20, type => int64, occurrence => repeated, opts => [packed]}]},
     {{msg, column},
      [#{name => column_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => semantic_type, fnum => 2, rnum => 3, type => {enum, 'column.SemanticType'}, occurrence => optional, opts => []},
       #{name => values, fnum => 3, rnum => 4, type => {msg, values}, occurrence => optional, opts => []},
       #{name => null_mask, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
       #{name => datatype, fnum => 5, rnum => 6, type => {enum, 'greptime.v1.ColumnDataType'}, occurrence => optional, opts => []}]},
     {{msg, column_def},
      [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => datatype, fnum => 2, rnum => 3, type => {enum, 'greptime.v1.ColumnDataType'}, occurrence => optional, opts => []},
       #{name => is_nullable, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []},
       #{name => default_constraint, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []}]}].


get_msg_names() -> [values, column, column_def].


get_group_names() -> [].


get_msg_or_group_names() -> [values, column, column_def].


get_enum_names() -> ['column.SemanticType', 'greptime.v1.ColumnDataType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(values) ->
    [#{name => i8_values, fnum => 1, rnum => 2, type => int32, occurrence => repeated, opts => [packed]},
     #{name => i16_values, fnum => 2, rnum => 3, type => int32, occurrence => repeated, opts => [packed]},
     #{name => i32_values, fnum => 3, rnum => 4, type => int32, occurrence => repeated, opts => [packed]},
     #{name => i64_values, fnum => 4, rnum => 5, type => int64, occurrence => repeated, opts => [packed]},
     #{name => u8_values, fnum => 5, rnum => 6, type => uint32, occurrence => repeated, opts => [packed]},
     #{name => u16_values, fnum => 6, rnum => 7, type => uint32, occurrence => repeated, opts => [packed]},
     #{name => u32_values, fnum => 7, rnum => 8, type => uint32, occurrence => repeated, opts => [packed]},
     #{name => u64_values, fnum => 8, rnum => 9, type => uint64, occurrence => repeated, opts => [packed]},
     #{name => f32_values, fnum => 9, rnum => 10, type => float, occurrence => repeated, opts => [packed]},
     #{name => f64_values, fnum => 10, rnum => 11, type => double, occurrence => repeated, opts => [packed]},
     #{name => bool_values, fnum => 11, rnum => 12, type => bool, occurrence => repeated, opts => [packed]},
     #{name => binary_values, fnum => 12, rnum => 13, type => bytes, occurrence => repeated, opts => []},
     #{name => string_values, fnum => 13, rnum => 14, type => string, occurrence => repeated, opts => []},
     #{name => date_values, fnum => 14, rnum => 15, type => int32, occurrence => repeated, opts => [packed]},
     #{name => datetime_values, fnum => 15, rnum => 16, type => int64, occurrence => repeated, opts => [packed]},
     #{name => ts_second_values, fnum => 16, rnum => 17, type => int64, occurrence => repeated, opts => [packed]},
     #{name => ts_millisecond_values, fnum => 17, rnum => 18, type => int64, occurrence => repeated, opts => [packed]},
     #{name => ts_microsecond_values, fnum => 18, rnum => 19, type => int64, occurrence => repeated, opts => [packed]},
     #{name => ts_nanosecond_values, fnum => 19, rnum => 20, type => int64, occurrence => repeated, opts => [packed]}];
find_msg_def(column) ->
    [#{name => column_name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => semantic_type, fnum => 2, rnum => 3, type => {enum, 'column.SemanticType'}, occurrence => optional, opts => []},
     #{name => values, fnum => 3, rnum => 4, type => {msg, values}, occurrence => optional, opts => []},
     #{name => null_mask, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []},
     #{name => datatype, fnum => 5, rnum => 6, type => {enum, 'greptime.v1.ColumnDataType'}, occurrence => optional, opts => []}];
find_msg_def(column_def) ->
    [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => datatype, fnum => 2, rnum => 3, type => {enum, 'greptime.v1.ColumnDataType'}, occurrence => optional, opts => []},
     #{name => is_nullable, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []},
     #{name => default_constraint, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('column.SemanticType') -> [{'TAG', 0}, {'FIELD', 1}, {'TIMESTAMP', 2}];
find_enum_def('greptime.v1.ColumnDataType') ->
    [{'BOOLEAN', 0},
     {'INT8', 1},
     {'INT16', 2},
     {'INT32', 3},
     {'INT64', 4},
     {'UINT8', 5},
     {'UINT16', 6},
     {'UINT32', 7},
     {'UINT64', 8},
     {'FLOAT32', 9},
     {'FLOAT64', 10},
     {'BINARY', 11},
     {'STRING', 12},
     {'DATE', 13},
     {'DATETIME', 14},
     {'TIMESTAMP_SECOND', 15},
     {'TIMESTAMP_MILLISECOND', 16},
     {'TIMESTAMP_MICROSECOND', 17},
     {'TIMESTAMP_NANOSECOND', 18}];
find_enum_def(_) -> error.


enum_symbol_by_value('column.SemanticType', Value) -> 'enum_symbol_by_value_column.SemanticType'(Value);
enum_symbol_by_value('greptime.v1.ColumnDataType', Value) -> 'enum_symbol_by_value_greptime.v1.ColumnDataType'(Value).


enum_value_by_symbol('column.SemanticType', Sym) -> 'enum_value_by_symbol_column.SemanticType'(Sym);
enum_value_by_symbol('greptime.v1.ColumnDataType', Sym) -> 'enum_value_by_symbol_greptime.v1.ColumnDataType'(Sym).


'enum_symbol_by_value_column.SemanticType'(0) -> 'TAG';
'enum_symbol_by_value_column.SemanticType'(1) -> 'FIELD';
'enum_symbol_by_value_column.SemanticType'(2) -> 'TIMESTAMP'.


'enum_value_by_symbol_column.SemanticType'('TAG') -> 0;
'enum_value_by_symbol_column.SemanticType'('FIELD') -> 1;
'enum_value_by_symbol_column.SemanticType'('TIMESTAMP') -> 2.

'enum_symbol_by_value_greptime.v1.ColumnDataType'(0) -> 'BOOLEAN';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(1) -> 'INT8';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(2) -> 'INT16';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(3) -> 'INT32';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(4) -> 'INT64';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(5) -> 'UINT8';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(6) -> 'UINT16';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(7) -> 'UINT32';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(8) -> 'UINT64';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(9) -> 'FLOAT32';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(10) -> 'FLOAT64';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(11) -> 'BINARY';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(12) -> 'STRING';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(13) -> 'DATE';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(14) -> 'DATETIME';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(15) -> 'TIMESTAMP_SECOND';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(16) -> 'TIMESTAMP_MILLISECOND';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(17) -> 'TIMESTAMP_MICROSECOND';
'enum_symbol_by_value_greptime.v1.ColumnDataType'(18) -> 'TIMESTAMP_NANOSECOND'.


'enum_value_by_symbol_greptime.v1.ColumnDataType'('BOOLEAN') -> 0;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('INT8') -> 1;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('INT16') -> 2;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('INT32') -> 3;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('INT64') -> 4;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('UINT8') -> 5;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('UINT16') -> 6;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('UINT32') -> 7;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('UINT64') -> 8;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('FLOAT32') -> 9;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('FLOAT64') -> 10;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('BINARY') -> 11;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('STRING') -> 12;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('DATE') -> 13;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('DATETIME') -> 14;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('TIMESTAMP_SECOND') -> 15;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('TIMESTAMP_MILLISECOND') -> 16;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('TIMESTAMP_MICROSECOND') -> 17;
'enum_value_by_symbol_greptime.v1.ColumnDataType'('TIMESTAMP_NANOSECOND') -> 18.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"greptime.v1.Column.Values">>) -> values;
fqbin_to_msg_name(<<"greptime.v1.Column">>) -> column;
fqbin_to_msg_name(<<"greptime.v1.ColumnDef">>) -> column_def;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(values) -> <<"greptime.v1.Column.Values">>;
msg_name_to_fqbin(column) -> <<"greptime.v1.Column">>;
msg_name_to_fqbin(column_def) -> <<"greptime.v1.ColumnDef">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"greptime.v1.Column.SemanticType">>) -> 'column.SemanticType';
fqbin_to_enum_name(<<"greptime.v1.ColumnDataType">>) -> 'greptime.v1.ColumnDataType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('column.SemanticType') -> <<"greptime.v1.Column.SemanticType">>;
enum_name_to_fqbin('greptime.v1.ColumnDataType') -> <<"greptime.v1.ColumnDataType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'greptime.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "column.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["column.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["column"].


get_msg_containment("column") -> [column, values, column_def];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("column") -> 'greptime.v1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("column") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("column") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("column") -> ['column.SemanticType', 'greptime.v1.ColumnDataType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"greptime.v1.Column.Values">>) -> "column";
get_proto_by_msg_name_as_fqbin(<<"greptime.v1.ColumnDef">>) -> "column";
get_proto_by_msg_name_as_fqbin(<<"greptime.v1.Column">>) -> "column";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"greptime.v1.ColumnDataType">>) -> "column";
get_proto_by_enum_name_as_fqbin(<<"greptime.v1.Column.SemanticType">>) -> "column";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"greptime.v1">>) -> ["column"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.7".

gpb_version_as_list() ->
    [4,19,7].

gpb_version_source() ->
    "file".
